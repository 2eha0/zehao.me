{"version":3,"file":"component---src-templates-blog-post-js-1b67778f7ddfd45338cc.js","mappings":"6HA2DA,IAhDY,WAqBV,OAAO,O,uHCLT,EAzBiB,WACf,IAAMA,GAAcC,EAAAA,EAAAA,QAAO,MAqB3B,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAASC,SAASC,cAAc,UAatC,OAZAF,EAAOG,IAAM,gCACbH,EAAOI,aAAa,OAAQ,kBAC5BJ,EAAOI,aAAa,aAAc,YAClCJ,EAAOI,aAAa,QAAS,MAC7BJ,EAAOI,aAAa,QAAS,gBAC7BJ,EAAOI,aAAa,cAAe,aACnCJ,EAAOK,OAAQ,EAEXR,EAAYS,SACdT,EAAYS,QAAQC,YAAYP,GAG3B,WACDH,EAAYS,UACdT,EAAYS,QAAQE,UAAY,OAGnC,IACI,uBAAKC,IAAKZ,KC4CnB,EA5DyB,SAAC,GAAwB,IAAD,EAArBa,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAmBR,EAAnBQ,SAAUC,EAAST,EAATS,KAElB,OACE,gBAAC,IAAD,CAAQR,SAAUA,EAAUM,MAAOH,GACjC,gBAAC,IAAD,CACEG,MAAOL,EAAKQ,YAAYH,MACxBI,YAAaT,EAAKQ,YAAYC,aAAeT,EAAKU,UAEpD,2BACEC,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYd,EAAKQ,YAAYH,OAC1C,yBAAIL,EAAKQ,YAAYO,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQjB,EAAKkB,MACxCJ,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAD,QAGJ,uBAAKH,UAAU,iBACb,sBACEQ,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGlB,GACC,gBAAC,EAAAmB,KAAD,CAAMC,GAAIpB,EAASqB,OAAOC,KAAMC,IAAI,QAApC,KACKvB,EAASE,YAAYH,QAI9B,0BACGE,GACC,gBAAC,EAAAkB,KAAD,CAAMC,GAAInB,EAAKoB,OAAOC,KAAMC,IAAI,QAC7BtB,EAAKC,YAAYH,MADpB,SAOR,gBAAC,EAAD","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/commonts.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\n// import * as React from \"react\"\n// import { useStaticQuery, graphql } from \"gatsby\"\n// import { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  // const data = useStaticQuery(graphql`\n  //   query BioQuery {\n  //     site {\n  //       siteMetadata {\n  //         author {\n  //           name\n  //           summary\n  //         }\n  //         social {\n  //           twitter\n  //         }\n  //       }\n  //     }\n  //   }\n  // `)\n\n  // // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  // const author = data.site.siteMetadata?.author\n  // const social = data.site.siteMetadata?.social\n\n  return null\n\n  // return (\n  //   <div className=\"bio\">\n  //     <StaticImage\n  //       className=\"bio-avatar\"\n  //       layout=\"fixed\"\n  //       formats={[\"auto\", \"webp\", \"avif\"]}\n  //       src=\"../images/profile-pic.png\"\n  //       width={50}\n  //       height={50}\n  //       quality={95}\n  //       alt=\"Profile picture\"\n  //     />\n  //     {author?.name && (\n  //       <p>\n  //         Written by <strong>{author.name}</strong> {author?.summary || null}\n  //         {` `}\n  //         <a href={`https://twitter.com/${social?.twitter || ``}`}>\n  //           You should follow them on Twitter\n  //         </a>\n  //       </p>\n  //     )}\n  //   </div>\n  // )\n}\n\nexport default Bio\n","import React, { useEffect, useRef } from 'react';\n\nconst Comments = () => {\n  const commentsRef = useRef(null);\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://utteranc.es/client.js';\n    script.setAttribute('repo', '2eha0/zehao.me');\n    script.setAttribute('issue-term', 'pathname');\n    script.setAttribute('label', 'üí¨');\n    script.setAttribute('theme', 'github-light');\n    script.setAttribute('crossorigin', 'anonymous');\n    script.async = true;\n\n    if (commentsRef.current) {\n      commentsRef.current.appendChild(script);\n    }\n\n    return () => {\n      if (commentsRef.current) {\n        commentsRef.current.innerHTML = '';\n      }\n    };\n  }, []);\n  return <div ref={commentsRef} />;\n};\n\nexport default Comments;","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Commonts from '../components/commonts'\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ‚Üê {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} ‚Üí\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      <Commonts />\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["commentsRef","useRef","useEffect","script","document","createElement","src","setAttribute","async","current","appendChild","innerHTML","ref","data","location","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","frontmatter","description","excerpt","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}